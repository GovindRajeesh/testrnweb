{"version":3,"sources":["Constants.js","components/Styles.js","tools/codeHandlers.js","components/GameContext.js","components/Input.js","components/Game.js","components/TopBar.js","App.js"],"names":["StyleSheet","create","container","flex","backgroundColor","justifyContent","keypad","alignItems","flexDirection","keypad_key","padding","color","width","textAlign","borderColor","borderWidth","keyText","keypad_enter","ctext","body","marginTop","gamegrid_box","marginRight","height","gamegrid_box_blank","gamegrid_box_crrct","Constants","gamegrid_box_isThere","gamegrid_box_invalid","gamegrid_row","marginBottom","topBar","digitSum","num","sum","i","toString","length","parseInt","createContext","Key","props","game","useContext","GameContext","TouchableOpacity","onPress","enter","back","input","setInput","value","substr","grid","push","code","row","c","column","includes","getRow","setGrid","chngCode","Alert","alert","text","cancelable","View","style","Styles","Text","KeyPad","map","GameBox","status","fontSize","GameRow","children","GameGrid","Array","from","_","ri","ci","GameView","ScrollView","TopBar","App","useState","setStatus","setCode","index","Math","floor","random","console","log","useEffect","Provider","alignSelf","ActivityIndicator","size","Dimensions","get","StatusBar"],"mappings":"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","file":"static/js/app.cac03e85.chunk.js","sourcesContent":["export default{\r\n    inpLength:4,\r\n    boxRowsLen:5,\r\n    color_crrct:\"#9fd62f\",\r\n    color_isThere:\"#ffc400\",\r\n    color_invalid:\"#b5b5b5\",\r\n}","import {StyleSheet} from \"react-native\" \r\nimport Constants from \"../Constants\";\r\n\r\nexport default StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n      backgroundColor: '#fff',\r\n      justifyContent: 'flex-end',\r\n    },\r\n    keypad:{\r\n        // flex:2,\r\n        // backgroundColor:\"#00b3ff\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        flexDirection:\"row\"\r\n    },\r\n    keypad_key:{\r\n      padding:10,\r\n      backgroundColor:\"#ff490d\",\r\n      color:\"white\",\r\n      width:75,\r\n      textAlign:\"center\",\r\n      borderColor:\"white\",\r\n      borderWidth:3,\r\n    },\r\n    keyText:{\r\n        color:\"white\",\r\n        textAlign:\"center\",\r\n    },\r\n    keypad_enter:{\r\n        width:100,\r\n    },\r\n    ctext:{\r\n        textAlign:\"center\"\r\n    },\r\n    body:{\r\n        marginTop:30,\r\n        flex:1,\r\n        justifyContent:\"flex-start\"\r\n    },\r\n    gamegrid_box:{\r\n        borderWidth:1,\r\n        marginRight:3,\r\n        borderColor:\"#dedede\",\r\n        padding:10,\r\n        height:75,\r\n        width:75,\r\n        justifyContent:\"center\"\r\n    },\r\n    gamegrid_box_blank:{\r\n        backgroundColor:\"white\",\r\n        color:\"green\",\r\n    },\r\n    gamegrid_box_crrct:{\r\n        backgroundColor:Constants.color_crrct,\r\n        borderColor:\"white\",\r\n    },\r\n    gamegrid_box_isThere:{\r\n        backgroundColor:Constants.color_isThere,\r\n        borderColor:\"white\",\r\n    },\r\n    gamegrid_box_invalid:{\r\n        backgroundColor:Constants.color_invalid,\r\n        borderColor:\"white\",\r\n    },\r\n    gamegrid_row:{\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        flexDirection:\"row\",\r\n        marginBottom:5,\r\n    },\r\n    topBar:{\r\n        marginTop:20,\r\n        height:50,\r\n        backgroundColor:\"#00b3ff\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n    },\r\n  });","export function getRow({input,code}){\r\n    var row=[]\r\n\r\n    for (let i = 0; i < input.length; i++) {\r\n        const c = input[i];\r\n        var column={}\r\n        if(code.toString()[i]==c){\r\n            column[\"status\"]=\"crrct\"\r\n        }else if(code.toString().includes(c)){\r\n            column[\"status\"]=\"isThere\"\r\n        }else{\r\n            column[\"status\"]=\"invalid\"\r\n        }\r\n\r\n        column[\"value\"]=c\r\n\r\n        row.push(column)\r\n    }\r\n    return row\r\n}\r\n\r\nexport function digitSum(num){\r\n    var sum=0\r\n\r\n    for (let i = 0; i < num.toString().length; i++) {\r\n        sum+=parseInt(num.toString()[i])\r\n    }\r\n\r\n    return sum\r\n}","import {createContext} from \"react\"\r\n\r\nexport default createContext({})","import { useContext } from \"react\"\r\nimport { TouchableOpacity, View, Text, Alert, ToastAndroid, Platform, AlertIOS } from \"react-native\"\r\nimport Constants from \"../Constants\"\r\nimport { getRow } from \"../tools/codeHandlers\"\r\nimport GameContext from \"./GameContext\"\r\nimport Styles from \"./Styles\"\r\n\r\nexport const Key = (props) => {\r\n    var game = useContext(GameContext)\r\n    return <TouchableOpacity onPress={() => {\r\n        if (!props.enter && !props.back && game.input.length < Constants.inpLength) {\r\n            game.setInput(game.input + props.value)\r\n        } else if (props.back) {\r\n            game.setInput(game.input.substr(0, game.input.length - 1))\r\n        } else if (props.enter && game.input.length==Constants.inpLength) {\r\n            var grid = game.grid\r\n            grid.push(\r\n                getRow({ input: game.input, code: game.code })\r\n            )\r\n\r\n            game.setGrid(grid)\r\n            game.setInput(\"\")\r\n\r\n            if(game.code.toString()==game.input || game.grid.length==Constants.boxRowsLen){\r\n                game.setGrid([])\r\n                game.chngCode()\r\n                if(game.grid.length==Constants.boxRowsLen && game.code.toString()!=game.input){\r\n                    Alert.alert(\"Sorry\",\"The code is \"+game.code,[\r\n                        {text:\"Close\"}\r\n                     ],{cancelable:true})\r\n                }else{\r\n                Alert.alert(\"Congratulations\",\"You have found the number!\",[\r\n                    {text:\"Close\"}\r\n                 ],{cancelable:true})\r\n                \r\n                }\r\n            }\r\n        }else if(props.enter && game.input.length!=Constants.inpLength){\r\n            Alert.alert(\"Error\",\"Not matching the required length\",[\r\n               {text:\"Close\"}\r\n            ],{cancelable:true})\r\n        }\r\n    }}>\r\n        <View style={props.enter ? [Styles.keypad_key, Styles.keypad_enter] : Styles.keypad_key}><Text style={Styles.keyText}>\r\n            {props.value ? props.value : \"\"}\r\n            {props.enter ? \"Enter\" : \"\"}\r\n            {props.back ? \"<-\" : \"\"}\r\n        </Text></View>\r\n    </TouchableOpacity>\r\n}\r\n\r\nexport const KeyPad = (props) => {\r\n    return <>\r\n        <View style={Styles.keypad}>{[0, 1, 2, 3, 4].map((value) => <Key key={\"key\" + value} value={value.toString()} />)}</View>\r\n        <View style={Styles.keypad}>{[5, 6, 7, 8, 9].map((value) => <Key key={\"key\" + value} value={value.toString()} />)}</View>\r\n        <View style={Styles.keypad}>\r\n            <Key enter={true} />\r\n            <Key back={true} />\r\n        </View>\r\n    </>\r\n}","import { View, Text } from \"react-native\"\r\nimport { useContext } from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport Styles from \"./Styles\"\r\nimport Constants from \"../Constants\"\r\nimport { ScrollView } from \"react-native\"\r\n\r\nexport function GameBox(props) {\r\n    return <View style={{ ...Styles.gamegrid_box, ...Styles[\"gamegrid_box_\" + props.status] }}><Text style={{ \r\n        textAlign: \"center\", \r\n        fontSize:20,\r\n        color: props.status != \"blank\" ? \"#fafafa\" : \"black\" \r\n    }}>{props.value}</Text></View>\r\n}\r\n\r\nexport function GameRow(props) {\r\n    return <View style={Styles.gamegrid_row}>{props.children}</View>\r\n}\r\n\r\nexport function GameGrid(props) {\r\n    var game = useContext(GameContext)\r\n    var input = game.input\r\n    return <View>\r\n        {Array.from({ length: Constants.boxRowsLen }, (_, i) => i).map((ri) => {\r\n            var row = game.grid[ri]\r\n            return <GameRow key={\"row\" + ri}>\r\n                {Array.from({ length: Constants.inpLength }, (_, i) => i).map((ci) => {\r\n                    var column = row ? row[ci] : { value: ri == 0 || game.grid[ri - 1] ? input[ci] : \"\", status: \"blank\" }\r\n                    return <GameBox key={\"column\" + ci + \"of\" + ri} status={column ? column.status : \"blank\"} value={\r\n                        column.value\r\n                    } />\r\n                })}\r\n            </GameRow>\r\n        })}\r\n    </View>\r\n}\r\n\r\nexport function GameView(props) {\r\n    var game = useContext(GameContext)\r\n    return <ScrollView>\r\n        <GameGrid></GameGrid>\r\n    </ScrollView>\r\n}","import React, { useContext } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { digitSum } from \"../tools/codeHandlers\";\r\nimport GameContext from \"./GameContext\";\r\nimport Styles from \"./Styles\";\r\n\r\nexport default function TopBar() {\r\n    var game = useContext(GameContext)\r\n    return <View style={Styles.topBar}>\r\n        {game.code ? \r\n        <>\r\n        <Text style={{ color: \"white\", fontSize: 20 }}>Digit Sum:{digitSum(parseInt(game.code))} First Digit:{game.code.toString()[0]}</Text>\r\n        </> : \r\n        <Text>Please wait..</Text>}\r\n    </View>\r\n}","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, Pressable, TouchableOpacity, ScrollView, ActivityIndicator, Dimensions } from 'react-native';\nimport Styles from './components/Styles';\nimport { KeyPad } from \"./components/Input\"\nimport GameContext from './components/GameContext';\nimport { useEffect, useState } from 'react';\nimport { GameView } from \"./components/Game\"\nimport Constants from './Constants';\nimport TopBar from './components/TopBar';\n\nexport default function App() {\n  var [input, setInput] = useState(\"\")\n  var [status, setStatus] = useState(\"loading\")\n  var [grid, setGrid] = useState([\n  ])\n\n  var [code, setCode] = useState(null)\n\n  var chngCode = () => {\n    var c = \"\"\n    for (let index = 0; index < Constants.inpLength; index++) {\n      c += Math.floor(Math.random() * 9)\n    }\n    setCode(c)\n    console.log(c)\n  }\n\n  useEffect(() => {\n    if (!code || status == \"loading\") {\n      chngCode()\n      setStatus(\"game\")\n    }\n    return () => { }\n  }, [code])\n  return (\n    <GameContext.Provider value={{\n      input, setInput,\n      grid, setGrid,\n      code, setCode, chngCode,\n      status, setStatus,\n    }}>\n      {status == \"game\" ?\n        <>\n          <View style={Styles.container}>\n            <TopBar />\n            <View style={Styles.body}>\n              <GameView />\n            </View>\n            <KeyPad />\n          </View>\n        </> : status == \"loading\" ?\n          <View style={{\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            alignSelf: \"stretch\",\n          }}><ActivityIndicator size=\"large\" color=\"#00b3ff\" style={\n            {\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width,\n            }\n          } /></View> : <View></View>}\n      <StatusBar style='auto' backgroundColor='#00b3ff' />\n    </GameContext.Provider>\n  );\n}\n"],"sourceRoot":""}